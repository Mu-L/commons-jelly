TO DO LIST
==========

* turn this TO DO list into an XML document in xdocs, then its on the website too.

* patch TagLibrary to alias all <mixedCase> tags to <mixed-case> tags

* add <copy> and <copyOf> to JSL

* consider using <jsl:stylesheet var="foo"> then reusing the stylesheet later via 

	<style stylesheet="${foo}">
		xml goes there...
	</style>
	
* add JSL test cases to test for ordering of patterns and that the correct output comes out.

* rename the DynaTag interface to be DynamicAttributes along with JSP1.3, also add a namespace URI parameter

* add JUnit tags along these lines...

	<junit:assert test="${foo == 22}">some description</junit:assert>
	<junit:assertEquals value="${foo}" expected="${22}"some description</junit:assert>

* warn if typeo is used for tag attribute; maybe even generate an error? 
	Should raise error if unused attribute is specified.

* add support for namespace URI use inside XPath expressions.

* when defining new tags using <define:tag>, we should allow attributes to be named,
  specified as required, specify the optional conditions and so forth for validating instances. 
  I guess this could just be normal script though.

* the org.apache.commons.jelly.impl package doesn't have a great name - can we think of a better one? 
  also some of the classes in this package could maybe do with a rename? ScriptBlock for example - should we 
  just call it a Block or maybe a CompositeScript?
		
* add EmptyScript to allow tags optimise if their body is empty.

* add whitespace trimming support. Allow a taglib to decide which tags 'trim' and which don't so that
  unnecessary whitespace can be removed at compile time.

* add parent Context and support for other scopes such as session, request, cookie, initParam, param etc.
  maybe add a Scope class for variable names which can contain a scope name and variable name. Then things like
  cookie:foo or initParam:bar can be parsed at compile time into an object.	

* add getResource() and getResourceAsStream() methods from ServletContext to Context to allow 
  included files to be loaded etc.	



* add an adapter to run JSP tag libraries inside Jelly when Jelly is used in a Servlet / JSP environment?

* document much more!

* provide an alternative non-XML parser such that Jelly scripts do not
  need to be XML. This could allow Velocity-style concise notation 
  for common Jelly tags.

* provide easy compile time tag transformations. Here are some possible use cases

  <magic:form>
      <form>
          <input name="foo">
          <input name="bar">
      </form>
  </magic:form>

  Then at 'parse/compile' time the <magic:form> could transform its fragment
  of real HTML into

      <form>
          <input name="foo" <j:expr value="${foo}">
          <input name="bar" <j:expr value="${bar}">
      </form>

  i.e. tags can just be a simple transformation mechansim that can add some
  common programatical guff to scripts. 


  Or we could do SOAP scripting...

  <babelfish:translate from="EN" to="FR">
      hello Geir
  </babelfish:translate>

  The <babelfish:translate> tag could really just be a small 'macro'
  autogenerated from a SOAP WSDL file that expands in place to the full SOAP
  equivalent of

  <io:soap
      url=http://babelfish.altavista.com/soap
      SOAPAction="urn:babelfish">
   <io:body>
    <SOAP-ENV:Envelope
      xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
      SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
      <SOAP-ENV:Body>
          <babelfish:translate xmlns:babelfish="bablefish.altavista.com" from="EN" to="FR">
              hello Geir
          </babelfish:translate>
      </SOAP-ENV:Body>
    </SOAP-ENV:Envelope>
   </io:body>
  </io:soap>

  So its more of a traditional macro - though could be implemented using XML
  technology for the transformation (e.g .it could use SAX, XSLT, XPath or
  DVSL to transform itself and its body).

