<?xml version="1.0"?>
<test:suite 
	xmlns:j="jelly:core" 
	xmlns:x="jelly:xml" 
	xmlns:test="jelly:junit" 
	xmlns:log="jelly:log">

  <test:case name="testElementAndAttribute">
  	
  	<x:parse var="doc">
  		<x:element name="foo">
  			<x:attribute name="x">1234</x:attribute>
  			
  			<x:element name="bar">
					<x:attribute name="y">ABC</x:attribute>
					hello
				</x:element>
  		</x:element>
  	</x:parse>
	
		<test:assert xpath="$doc/foo"/>
		<test:assert xpath="$doc/foo[@x='1234']"/>
		<test:assert xpath="count($doc/bar) = 0"/>

		<!-- test nested element and attributes -->		
		<test:assert xpath="$doc/foo[@x='1234']/bar[@y='ABC']"/>
		<test:assert xpath="$doc/foo[@x='1234']/bar[@y='ABC']='hello'"/>
  </test:case>
  
  <test:case name="testBadElementAndAttribute">
  	
    <j:catch var="ex">
  		<x:element name="foo">
  			some text
  			<x:attribute name="x">1234</x:attribute>
  		</x:element>
		</j:catch>    	
		
		<test:assert test="${ex != null}">
			We should have created an exception as some text is output before the attributes
		</test:assert>
  </test:case>
  
  <test:case name="assertXPathTests">
  
    <x:parse var="doc">
      <foo>
      	<bar>cheese</bar>
      </foo>
    </x:parse>  
     
  
    <test:assert xpath="$doc/foo/bar">This should never fail</test:assert>
    <test:assert xpath="$doc/foo/bar = 'cheese'">This should never fail</test:assert>
    
    <j:catch var="ex">
		  <test:assert xpath="$doc/foo/xyz">This should always fail</test:assert>
		</j:catch>    	
		
		<test:assert test="${ex != null}">We should have created an exception</test:assert>
		
		The exception was: ${ex.message}
  </test:case>

	<!-- test the use of namespaces with XPath -->
  <test:case name="assertXPathWithNamespaceTests" xmlns:a="fooURI" xmlns:z="doesNotMatch" xmlns="different">
  
    <x:parse var="doc">
      <foo xmlns="fooURI">
      	<bar>cheese</bar>
      </foo>
    </x:parse>  
     
    <test:assert xpath="$doc/a:foo/a:bar">This should never fail</test:assert>
    <test:assert xpath="$doc/b:foo/b:bar" xmlns:b="fooURI">This should never fail</test:assert>
    
    <j:catch var="ex">
		  <test:assert xpath="$doc/z:foo/z:bar">This should always fail</test:assert>
		</j:catch>    	
		
		<test:assert test="${ex != null}">We should have created an exception</test:assert>
		
    <j:catch var="ex">
		  <test:assert xpath="$doc/foo/bar">This should always fail, since foo is not in the empty namespace</test:assert>
		</j:catch>    	
		
		<test:assert test="${ex != null}">We should have created an exception</test:assert>
		
		<!-- 
			|| now lets test that the default namespace 'different' is ignored by the XPath expressions
			|| since XPath should ignore the default namespace - you must use a prefix in XPath to denote
			|| a namespace
			-->
		<test:assert xpath="$doc/*[local-name()='foo']"/>
  </test:case>


  
</test:suite>
