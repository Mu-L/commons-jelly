<?xml version="1.0"?>
<j:jelly
    xmlns:j="jelly:core"
    xmlns="jelly:jetty"
    xmlns:http="jelly:http"
    trim="false">

    <j:set var="contextPathVar" value="/"/>
    <j:set var="testPort" value="8100"/>
    <j:set var="forbiddenUri" value="http://localhost:${testPort}/noaccess"/>

    <jettyHttpServer var="httpServerForbidden">
      <socketListener port="${testPort}"/>
      <httpContext contextPath="${contextPathVar}" resourceBase="./docRoot">
          <securityHandler>
            <constraints>

              <security-constraint>
                <web-resource-collection>
                  <web-resource-name>Forbidden</web-resource-name>
                  <url-pattern>/*</url-pattern>
                </web-resource-collection>
                <auth-constraint>
                </auth-constraint>
              </security-constraint>

            </constraints>
          </securityHandler>

          <resourceHandler/>
      </httpContext>
    </jettyHttpServer>

    <!-- get should always be forbidden -->
    <http:get var="mtc" uri="${forbiddenUri}"/>

    <j:choose>
      <j:when test="${mtc.statusCode == 403}">
          It works!
      </j:when>

      <j:otherwise>
        Results for mtc url are:
        http return code = ${mtc.statusCode}
        http status text = '${mtc.statusText}'
      </j:otherwise>
    </j:choose>
    ${httpServerForbidden.stop(false)}

</j:jelly>
