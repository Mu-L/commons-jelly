<project default="java:jar" xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:util="jelly:util">

  <!-- define jelly task -->	
  <goal name="jelly-task" prereqs="java:compile, test:compile">
		<path id="test.classpath">
      <pathelement path="${maven.build.dest}"/>
      <pathelement path="target/classes"/>
      <pathelement path="target/test-classes"/>
      <path refid="maven.dependency.classpath"/>
		</path>
	  
    <taskdef
      name="jelly"
      classname="org.apache.commons.jelly.task.JellyTask">
      <classpath refid="test.classpath"/>
    </taskdef>    

  </goal>
    

  <!-- copies unit testing stuff -->
  <postGoal name="test:compile">
    <copy todir="target/test-classes">
      <fileset dir="src/test">
        <include name="**/*.properties"/>
        <include name="META-INF/services/*"/>
        <include name="**/*.jelly"/>
        <include name="**/*.xml"/>
        <include name="**/*.dtd"/>
        <include name="**/*.rng"/>
      </fileset>
    </copy>
  </postGoal>
  
  <!-- runs the XML doclet -->  
  <goal name="doclet:xml" prereqs="java:compile">
    <path id="doclet.classpath">
      <pathelement path="${maven.build.dest}"/>
      <path refid="maven.dependency.classpath"/>
    </path>
    
    <javadoc 
      sourcepath="src/java" 
      packagenames="org.apache.commons.jelly.tags.*"
      doclet="org.apache.commons.jelly.util.XMLDoclet"
      docletpathref="doclet.classpath">
    </javadoc>
  </goal>

  <!-- runs the Tag doclet -->  
  <goal name="doclet:tag" prereqs="java:compile">
    <path id="doclet.classpath">
      <pathelement path="target/classes"/>
      <pathelement path="${maven.build.dest}"/>
      <path refid="maven.dependency.classpath"/>
    </path>
  
    <javadoc 
      sourcepath="src/java" 
      packagenames="org.apache.commons.jelly.tags.*"
      doclet="org.apache.commons.jelly.util.TagXMLDoclet"
      docletpathref="doclet.classpath">
    </javadoc>
  </goal>
	
  <!-- creates the XML webpage from the tag XML information -->		
  <goal name="doc:tags" prereqs="doclet:tag, jelly-task" 
		description="Generates the tag documentation">
	
		<mkdir dir="target/generated-xdocs"/>

<!--      
		<jelly file="src/script/makeTagDoc.jelly" 
			   output="target/generated-xdocs/tags.xml"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/script/makeTagDoc.jelly"/> 
      <arg value="-o"/>
      <arg value="target/generated-xdocs/tags.xml"/> 
    </java>
  </goal>


  <!-- ensure that the tag documentation is generated as part of the site -->  
  <preGoal
    name="site:generate">

    <attainGoal name="doc:tags"/>
  
  </preGoal>


  <!-- ensure that the test jelly scripts are copied to the test-classes directory -->	
  <preGoal name="test:test">
    <copy todir="${maven.test.dest}">
	  <fileset dir="${pom.build.unitTestSourceDirectory}" includes="**/*.jelly"/>
	</copy>
  </preGoal>


  <!-- create the lib and bin directories in the binary distro -->  
  <preGoal name="dist:build">

    <echo>About to create lib and bin directories in ${maven.dist.assembly.dir}</echo>

    <mkdir dir="${maven.dist.assembly.dir}/bin"/>
    <mkdir dir="${maven.dist.assembly.dir}/lib"/>
    <mkdir dir="${maven.dist.assembly.dir}/custom"/>
  
    <copy todir="${maven.dist.assembly.dir}/bin">
      <fileset dir="src/bin"/>
    </copy>
    
    <chmod file="${maven.dist.assembly.dir}/bin/jelly" perm="ugo+rx" />

    <j:forEach var="dep" items="${pom.dependencies}">
      <j:choose>
        <j:when test="${dep.id == 'forehead'}">
          <copy tofile="${maven.dist.assembly.dir}/lib/forehead.jar" 
              file="${maven.repo.local}/${dep.projectId}/jars/${dep.jar}"/>
        </j:when>
        <j:otherwise>
          <copy todir="${maven.dist.assembly.dir}/lib" 
              file="${maven.repo.local}/${dep.projectId}/jars/${dep.jar}"/>
        </j:otherwise>
      </j:choose>
    </j:forEach>
  
    <!-- put a copy of Jelly's jar there too -->               
    <copy todir="${maven.dist.assembly.dir}/lib" 
            file="${maven.build.dir}/${maven.final.name}.jar"/>
  </preGoal>

  <!-- ===================================================================== -->
  <!--                      D I S T : I N S T A L L                          -->
  <!-- ===================================================================== -->
  <!-- This installs Jelly on your system. With an installed Jelly, you'll   -->
  <!-- be able to run Jelly scripts from wherever your are, using :          -->
  <!-- "jelly <script> <outputfile>".                                        -->
  <!-- The installation dir is set in the project.properties file, under the -->
  <!-- name "maven.dist.install.dir", which defaults to "/usr/local/jelly"   -->
  <!-- (yep, that's a Linux path :). Please override it to suit your needs   -->
  <!-- ===================================================================== -->

  <goal name="dist:install"
            description="Installs Jelly on your system."
            prereqs="dist:build">

    <echo>
      +-------------------------------------------------------+
      | I N S T A L L I N G   J E L L Y                       |
      +-------------------------------------------------------+
    </echo>
    <mkdir dir="${maven.dist.install.dir}"/>

    <copy todir="${maven.dist.install.dir}">
      <fileset dir="${maven.dist.assembly.dir}"/>
    </copy>

    <chmod file="${maven.dist.install.dir}/bin/jelly" perm="ugo+rx" />

    <echo>
      * ===================================================== *
      *                    W A R N I N G                      *
      * ===================================================== *
      * Jelly is now almost installed on your system !        *
      * Next, you must set JELLY_HOME to point to             *
      * "maven.dist.install.dir", and add JELLY_HOME/bin      *
      * to your PATH.                                         *
      *                                                       *
      * Then, you will be able to run Jelly scripts using the *
      * command : "jelly script outputfile".                  *
      *                                                       *
      * Enjoy !                                               *
      * ===================================================== *
    </echo>
  </goal>

  <!-- demo programs -->

  	
  <goal name="demo:quartz" prereqs="jelly-task" 
	description="Runs the example quartz demo">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/quartz/example.jelly"/> 
    </java>
  </goal>

  <goal name="demo:soap" prereqs="jelly-task" 
	description="Runs the example SOAP demo">
	
	<jelly file="src/test/org/apache/commons/jelly/define/example.jelly"/> 
  </goal>

  <goal name="demo:bean" prereqs="jelly-task" 
	description="Runs the example of binding beans to tags">

<!--	
	<jelly file="src/test/org/apache/commons/jelly/define/beanSample.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/define/beanSample.jelly"/> 
    </java>
  </goal>

  <goal name="demo:jellybean" prereqs="jelly-task" 
		description="Runs the example of binding jelly beans to tags">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/define/jellyBeanSample.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/define/jellyBeanSample.jelly"/> 
    </java>
  </goal>

  <goal name="demo:static" prereqs="jelly-task" 
		description="Outputs some static XML">
	
	<jelly file="src/test/org/apache/commons/jelly/testStatic.jelly"/> 
  </goal>

  <goal name="demo:html" prereqs="jelly-task" 
		description="Runs the example of parsing HTML with jelly">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/html/example.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/html/example.jelly"/> 
    </java>
  </goal>

  <goal name="demo:text" prereqs="jelly-task" 
		description="Runs the example of parsing text with tags via jelly">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/html/example2.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/html/example2.jelly"/> 
    </java>
  </goal>

  <goal name="demo:test" prereqs="jelly-task" 
	description="Runs a sample JUnit test suite via Jelly">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/junit/testSuite.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/junit/testSuite.jelly"/> 
    </java>
  </goal>

  <goal name="demo:junit" prereqs="jelly-task" 
	description="Runs the Jelly JUnit test suite">
	
    <java classname="org.apache.commons.jelly.junit.TestJUnit" fork="yes">
      <classpath refid="test.classpath"/>
    </java>
  </goal>

  <goal name="demo:betwixt" prereqs="jelly-task" 
	description="Runs the betwixt test suite">
	
    <java classname="org.apache.commons.jelly.betwixt.TestJelly" fork="yes">
      <classpath refid="test.classpath"/>
    </java>
  </goal>

  <goal name="demo:jeez" prereqs="jelly-task" 
	description="A demo of the jeez taglib">

    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/jeez/example.jelly"/> 
    </java>
<!--	
	<jelly file="src/test/org/apache/commons/jelly/jeez/example.jelly"/> 
-->	
  </goal>

  <goal name="demo:jeez2" prereqs="jelly-task" 
	description="A demo of the jeez taglib looks just like Ant">

    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/jeez/filescanner.jelly"/> 
    </java>
<!--	
	<jelly file="src/test/org/apache/commons/jelly/jeez/example.jelly"/> 
-->	
  </goal>

  <goal name="demo:fileset" prereqs="jelly-task" 
	description="A demo of the fileScanner tag to walk Ant fileSets">
	
	<jelly file="src/test/org/apache/commons/jelly/ant/filescanner.jelly"/> 
  </goal>

  <goal name="demo:fileset2" prereqs="jelly-task" 
	description="A demo of the fileScanner tag to walk Ant fileSets">
	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/ant/filescanner.jelly"/> 
    </java>
  </goal>

  <goal name="demo:werkz" prereqs="jelly-task" 
	description="A demo of the werkz tag library">
	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/werkz/example.jelly"/> 
    </java>
  </goal>

  <goal name="demo:file" prereqs="jelly-task" 
	description="A demo of using the file tag to output to multiple files">
	
	<jelly file="src/test/org/apache/commons/jelly/testFile.jelly"/> 
  </goal>


   <goal name="demo:jsl" prereqs="jelly-task" 
      description="Runs a simple demo of the JSL tags">

<!--      
	<jelly file="src/test/org/apache/commons/jelly/jsl/example.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/jsl/example.jelly"/> 
    </java>
	
   </goal>

   <goal name="demo:jsl2" prereqs="jelly-task" 
      description="Runs demo #2 of the JSL tags">
      
<!--      
	<jelly file="src/test/org/apache/commons/jelly/jsl/example2.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/jsl/example2.jelly"/> 
    </java>
	
	
   </goal>

  <goal name="demo:swing" prereqs="jelly-task"
    description="Runs a sample Swing demo, creating a Swing UI from Jelly script">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/swing/example.jelly"/> 
    </java>
  </goal>
	
  <goal name="demo:validate-rng" prereqs="jelly-task"
    description="Runs a validation demo, with RelaxNG">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/validate/validateRNG.jelly"/> 
    </java>
  </goal>
	
  <goal name="demo:validate-dtd" prereqs="jelly-task"
    description="Runs a validation demo, with DTD">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/validate/validateDTD.jelly"/> 
    </java>
  </goal>
	

  <goal name="demo:antjar" prereqs="jelly-task"
    description="Runs a sample which creates a jar using the Ant tag library">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/ant/example_jar.jelly"/> 
    </java>
  </goal>
	
  <goal name="demo:embed" prereqs="jelly-task"
    description="A sample Swing app which lets you build a personalized homepage, and uses Jelly as a templating engine">
    <java classname="org.apache.commons.jelly.demos.HomepageBuilder" fork="yes">
      <classpath refid="test.classpath"/>
    </java>
  </goal>

   <goal name="demo:sql" prereqs="jelly-task" 
      description="Runs an SQL demo">
      
      <!-- Values used for testing -->
	  <property name="databaseUrl"             value="jdbc:hsqldb:target/hsql"/>
	  <property name="databaseDriver"          value="org.hsqldb.jdbcDriver"/>
	  <property name="databaseUser"            value="sa"/>
	  <property name="databaseTable"           value="SYSTEM_TABLES"/>

	<echo message="Running examples and outputting results to target directory"/>

    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="databaseUrl" value="${databaseUrl}"/>
      <sysproperty key="databaseDriver" value="${databaseDriver}"/>
      <sysproperty key="databaseUser" value="${databaseUser}"/>
      <sysproperty key="databaseTable" value="${databaseTable}"/>
      <arg value="src/test/org/apache/commons/jelly/sql/example3.jelly"/> 
    </java>
    
<!--	
	<jelly file="src/test/org/apache/commons/jelly/sql/example.jelly" output="target/sqloutput.xml"/>
	<jelly file="src/test/org/apache/commons/jelly/sql/example2.jelly" output="target/sqloutput2.xml"/>	
	<jelly file="src/test/org/apache/commons/jelly/sql/testSql.jelly" output="target/sqloutput3.xml"/>		
-->	
  </goal>


   
  <goal name="demo:tagdef" prereqs="java:compile"
    description="A demonstration of the use of tagdef inside a Maven build">
    
    About to define the foo tag...
    
    <tagdef name="foo">
      <j:if test="${x == null}">
        <j:set var="x" value="${0}"/>
      </j:if>
	  <echo>Called with ${name}. The value of x is ${x} and now will increment</echo>    	
	  <j:set var="x" value="${x + 1}"/>
	  <echo>Value is now ${x}</echo>    	
	</tagdef>
	
	Now about to invoke the foo tag...
	<foo name="a" x="1"/>
	<foo name="b"/>			  			  
	
	Done
  	
  </goal>

    	          
  <goal name="demo:jellyunit" prereqs="jelly-task"
    description="Runs the JellyUnit test cases using Jelly (rather than as part of the Maven/Ant junit task)">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="http.proxyHost" value="${maven.proxy.host}"/>
      <sysproperty key="http.proxyPort" value="${maven.proxy.port}"/>
     <arg value="src/test/org/apache/commons/jelly/jellyunit.jelly"/> 
    </java>
  </goal>
	
	
	<!-- move this into a Maven plugin -->
  <goal name="jelly:runner" prereqs="jelly-task"
    description="Runs the Jelly Runner which is a JellySwing script to run other Jelly scripts)">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="http.proxyHost" value="${maven.proxy.host}"/>
      <sysproperty key="http.proxyPort" value="${maven.proxy.port}"/>
     <arg value="src/test/org/apache/commons/jelly/swing/run.jelly"/> 
    </java>
  </goal>

	<!-- a simple example program to demonstrate the use of <tableModel> -->	
  <goal name="jelly:showvars" prereqs="jelly-task"
    description="Displays the current variables in the Maven project">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="http.proxyHost" value="${maven.proxy.host}"/>
      <sysproperty key="http.proxyPort" value="${maven.proxy.port}"/>
      <arg value="src/test/org/apache/commons/jelly/swing/showVariables.jelly"/> 
    </java>
  </goal>
  
	<!-- a sample of using the command line interface to invoke Jelly -->	
  <goal name="demo:cmdline" prereqs="jelly-task"
    description="Demonstrates how to use the command line interface to Jelly">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/testCmdLineOptions.jelly"/> 
      <arg value="-a"/> 
      <arg value="valueOfA"/> 
      <arg value="-b"/> 
      <arg value="valueOfB"/> 
      <arg value="-c"/> 
      <arg value="valueOfC"/> 
      <arg value="-Dtestsysprop=valueOfTestSystemProp"/> 
    </java>
  </goal>


  <goal name="demo:async" 
  	description="An example of using asynchronous invocation of goals">

    <j:thread>
      <attainGoal name="demo:asyncOtherThread"/>
    </j:thread>

    <echo>XXXX</echo>

		<util:sleep millis="1000"/>
  </goal>

  <goal name="demo:asyncOtherThread"
  	description="A private target invoked by the async demo">
    <echo>YYYY</echo>
  </goal>

</project>
