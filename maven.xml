<project default="jar:jar" xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:util="jelly:util">

  <!-- create the lib and bin directories in the binary distro -->
  <preGoal name="dist:build">

    <echo>About to create lib and bin directories in ${maven.dist.assembly.dir}</echo>

    <mkdir dir="${maven.dist.assembly.dir}/bin"/>
    <mkdir dir="${maven.dist.assembly.dir}/lib"/>
    <mkdir dir="${maven.dist.assembly.dir}/custom"/>

    <copy todir="${maven.dist.assembly.dir}/bin">
      <fileset dir="src/bin"/>
    </copy>

    <chmod file="${maven.dist.assembly.dir}/bin/jelly" perm="ugo+rx" />

    <j:forEach var="dep" items="${pom.dependencies}">
      <j:choose>
        <j:when test="${dep.id == 'forehead'}">
          <copy tofile="${maven.dist.assembly.dir}/lib/forehead.jar"
              file="${maven.repo.local}/${dep.artifactDirectory}/${dep.type}s/${dep.artifact}"/>
        </j:when>
        <j:otherwise>
          <copy todir="${maven.dist.assembly.dir}/lib"
              file="${maven.repo.local}/${dep.artifactDirectory}/${dep.type}s/${dep.artifact}"/>
        </j:otherwise>
      </j:choose>
    </j:forEach>

    <!-- put a copy of Jelly's jar there too -->
    <copy todir="${maven.dist.assembly.dir}/lib"
            file="${maven.build.dir}/${maven.final.name}.jar"/>
  </preGoal>

  <!-- TAG LIBS BUILD -->
  <goal 
    name="tags:build"
    description="Build each tag into an installable jar">

    <maven:reactor
      basedir="jelly-tags"
      includes="*/project.xml"
      goals="clean,jar:install"
      banner="Building tag"
      ignoreFailures="false"/>
  </goal>

  <!-- TAG DOCUMENTATION -->
  <goal 
    name="tags:doc"
    description="Build the documentation for each tag library">

    <j:set var="maven.jellydoc.packages" value="org.apache.commons.jelly.*"/>
    
    <maven:reactor
      basedir="jelly-tags"
      includes="*/project.xml"
      goals="jellydoc,xdoc"
      banner="Building tag"
      ignoreFailures="false"/>
  </goal>

  <!-- Do the same goal on all Tag Libs -->
  <goal 
    name="tags:do"
    description="Do a specific goal on each taglib">

    <maven:reactor
      basedir="jelly-tags"
      includes="*/project.xml"
      goals="${goal}"
      banner="Building tag"
      ignoreFailures="false"/>
  </goal>


  <!-- ===================================================================== -->
  <!--                      D I S T : I N S T A L L                          -->
  <!-- ===================================================================== -->
  <!-- This installs Jelly on your system. With an installed Jelly, you'll   -->
  <!-- be able to run Jelly scripts from wherever your are, using :          -->
  <!-- "jelly <script> <outputfile>".                                        -->
  <!-- The installation dir is set in the project.properties file, under the -->
  <!-- name "maven.dist.install.dir", which defaults to "/usr/local/jelly"   -->
  <!-- (yep, that's a Linux path :). Please override it to suit your needs   -->
  <!-- ===================================================================== -->

  <goal name="dist:install"
            description="Installs Jelly on your system."
            prereqs="dist:build">

    <echo>
      +-------------------------------------------------------+
      | I N S T A L L I N G   J E L L Y                       |
      +-------------------------------------------------------+
    </echo>
    <mkdir dir="${maven.dist.install.dir}"/>

    <copy todir="${maven.dist.install.dir}">
      <fileset dir="${maven.dist.assembly.dir}"/>
    </copy>

    <chmod file="${maven.dist.install.dir}/bin/jelly" perm="ugo+rx" />

    <echo>
      * ===================================================== *
      *                    W A R N I N G                      *
      * ===================================================== *
      * Jelly is now almost installed on your system !        *
      * Next, you must set JELLY_HOME to point to             *
      * "${maven.dist.install.dir}", and add JELLY_HOME/bin   *
      * to your PATH.                                         *
      *                                                       *
      * Then, you will be able to run Jelly scripts using the *
      * command : "jelly script outputfile".                  *
      *                                                       *
      * Enjoy !                                               *
      *                                                       *
      * p.s. if ${maven.dist.install.dir} isn't where you'd   *
      * like Jelly installed, please set a property called    *
      * maven.dist.install.dir to the appropriate directory   *
      * ===================================================== *
    </echo>
  </goal>


  <!-- ===================================================================== -->
  <!-- GENERATE THE LIBRARY AND JELLYDOC DOCUMENTATION                       -->
  <!-- ===================================================================== -->
  <preGoal name="xdoc:transform">
    <!-- use a template to create the plugins home page
       if it's an xdoc, it must be done before xdoc:transform
       and should generate to ${maven.gen.docs}/libs/index.xml
      -->
      
    <!-- can't pass anything into the jellydoc doclet so its hard coded to target -->      
    <mkdir dir="target"/>
          
    <mkdir dir="${maven.gen.docs}/libs/"/>
    <j:file name="${maven.gen.docs}/libs/index.xml"
      prettyPrint="true">
      <document>
        <properties>
          <title>Jelly Libraries</title>
          <author email="dion@multitask.com.au">dIon Gillard</author>
        </properties>
        <body>
          <section name="Jelly Libraries">
            <p>
              The following libraries are available for Jelly as part of the standard distribution.
              Other libraries are maintained elsewhere - please see the 
              <a href="../poweredby.html">powered by</a> page for more details.
            </p>
            <ul>
              <fileScanner var="pluginProjects">
                <fileset dir="${basedir}">
                  <include name="jelly-tags/*/project.xml" />
                </fileset>
             </fileScanner>
             <j:forEach items="${pluginProjects.iterator()}" var="plugin">
               <j:set var="pluginName" value="${plugin.parentFile.name}" />
               <li>
                 <a href="./${pluginName}/index.html">${pluginName}</a> :
                 <a href="./${pluginName}/tags.html">tags</a> 
               </li>
             </j:forEach>
            </ul>
          </section>
        </body>
      </document>
    </j:file>
  </preGoal>

  <preGoal name="xdoc">
    <maven:reactor
      basedir="${basedir}"
      includes="jelly-tags/*/project.xml"
      goals="jellydoc,maven-jdepend-plugin:report,maven-javadoc-plugin:report,maven-junit-report-plugin:report,maven-changelog-plugin:report,xdoc:transform"
      banner="Generating jellydoc for"
      ignoreFailures="false"
    />

  <!--    
        <attainGoal name="maven-checkstyle-plugin:report"/>
        <attainGoal name="maven-changelog-plugin:report"/>
        <attainGoal name="maven-developer-activity-plugin:report"/>
        <attainGoal name="maven-file-activity-plugin:report"/>
        <attainGoal name="maven-junit-report-plugin:report"/>
        <attainGoal name="maven-linkcheck-plugin:report"/>
        <attainGoal name="maven-tasklist-plugin:report"/>    
  -->        
        
  <!--        
    This runs out of memory - have a feeling its the velocity & xdoc plugin
    
    <maven:reactor
      basedir="${basedir}"
      includes="jelly-tags/*/project.xml"
      goals="site"
      banner="Generating site for"
      ignoreFailures="false"
    />
    -->
    
    <j:if test="${context.getVariable('maven.docs.dest') == null}">
      <j:set var="maven.docs.dest" value="target/docs"/>
    </j:if>
    
    <!-- create the parent directory for the docs -->
    <mkdir dir="${maven.docs.dest}/libs" />
  
    <!-- copy them all to ${maven.docs.dest}/libs/${plugin.id}/ -->
    <fileScanner var="pluginProjects">
      <fileset dir="${basedir}">
        <include name="jelly-tags/*/project.xml" />
      </fileset>
    </fileScanner>
    
    <j:forEach items="${pluginProjects.iterator()}" var="plugin">
      <j:set var="pluginName" value="${plugin.parentFile.name}" />
      <mkdir dir="${maven.docs.dest}/libs/${pluginName}/" />
      <copy toDir="${maven.docs.dest}/libs/${pluginName}/">
        <fileset dir="jelly-tags/${pluginName}/target/docs/">
          <include name="**" />
        </fileset>
      </copy>
    </j:forEach>

    <!-- now lets implement the jellydoc for the core package -->    
    <j:set var="maven.jellydoc.packages" value="org.apache.commons.jelly.tags.core.*"/>
    <attainGoal name="jellydoc"/>
    
  </preGoal>




  <!-- demo programs -->

  <!-- a sample of using the command line interface to invoke Jelly -->
  <goal name="demo:cmdline" prereqs="create-classpath"
    description="Demonstrates how to use the command line interface to Jelly">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/testCmdLineOptions.jelly"/>
      <arg value="-a"/>
      <arg value="valueOfA"/>
      <arg value="-b"/>
      <arg value="valueOfB"/>
      <arg value="-c"/>
      <arg value="valueOfC"/>
      <arg value="-Dtestsysprop=valueOfTestSystemProp"/>
    </java>
  </goal>


  <goal name="test:benchmark" prereqs="create-classpath"
    description="A simple bit of Jelly script used as a benchmark to guage performance">
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/benchmark/benchmark.jelly"/>
    </java>
  </goal>

  <goal name="demo:embed" prereqs="create-classpath"
    description="A sample Swing app which lets you build a personalized homepage, and uses Jelly as a templating engine">
    <java classname="org.apache.commons.jelly.demos.HomepageBuilder" fork="yes">
      <classpath refid="test.classpath"/>
    </java>
  </goal>

  <goal name="demo:async"
    description="An example of using asynchronous invocation of goals">

    <j:thread>
      <attainGoal name="demo:asyncOtherThread"/>
    </j:thread>

    <echo>XXXX</echo>

    <!-- FIXME: util now in a sep taglib    <util:sleep millis="1000"/> -->
  </goal>

  <goal name="demo:asyncOtherThread"
    description="A private target invoked by the async demo">
    <echo>YYYY</echo>
  </goal>

  <!--
   | Disable some goals not currently working with CVS HEAD 
   |-->
  <goal name="maven-license-plugin:report"/>


  <!-- define the classpath used to run examples -->
  <goal name="create-classpath" prereqs="java:compile,test:compile">
    <path id="test.classpath">
      <pathelement path="${maven.build.dest}"/>
      <pathelement path="target/classes"/>
      <pathelement path="target/test-classes"/>
      <path refid="maven.dependency.classpath"/>
    </path>
  </goal>
</project>
