<project default="java:jar" xmlns:j="jelly:core">

  <!-- define jelly task -->	
  <goal name="jelly-task" prereqs="java:compile">
	<path id="test.classpath">
	    <pathelement path="${maven.build.dest}"/>
	    <pathelement path="target/classes"/>
	    <pathelement path="target/test-classes"/>
	    <path refid="maven.dependency.classpath"/>
	</path>
	  
    <taskdef
      name="jelly"
      classname="org.apache.commons.jelly.task.JellyTask">
      <classpath refid="test.classpath"/>
    </taskdef>    
  </goal>

  <!-- runs the XML doclet -->  
  <goal name="xml-doclet" prereqs="java:compile">
    <path id="doclet.classpath">
      <pathelement path="${maven.build.dest}"/>
      <path refid="maven.dependency.classpath"/>
    </path>
    
    <javadoc 
      sourcepath="src/java" 
      packagenames="org.apache.commons.jelly.tags.*"
      doclet="org.apache.commons.jelly.util.XMLDoclet"
      docletpathref="doclet.classpath">
    </javadoc>
  </goal>

  <!-- runs the Tag doclet -->  
  <goal name="tag-doclet" prereqs="java:compile">
    <path id="doclet.classpath">
      <pathelement path="target/classes"/>
      <pathelement path="${maven.build.dest}"/>
      <path refid="maven.dependency.classpath"/>
    </path>
  
    <javadoc 
      sourcepath="src/java" 
      packagenames="org.apache.commons.jelly.tags.*"
      doclet="org.apache.commons.jelly.util.TagXMLDoclet"
      docletpathref="doclet.classpath">
    </javadoc>
  </goal>
	
  <!-- creates the XML webpage from the tag XML information -->		
  <goal name="doc-tags" prereqs="tag-doclet, jelly-task" 
	description="Generates the tag documentation">
	
	<mkdir dir="target/generated-xdocs"/>

	<jelly file="src/script/makeTagDoc.jelly" 
		   output="target/generated-xdocs/tags.xml"/> 
  </goal>


  <!-- ensure that the tag documentation is generated as part of the site -->  
  <preGoal
    name="site:generate">

    <attainGoal name="doc-tags"/>
  
  </preGoal>

  <!-- create the lib and bin directories in the binary distro -->  
  <preGoal
    name="dist:build">

    <echo>The POM is ${pom.build}</echo>
    <echo>About to create lib and bin directories in ${maven.dist.assembly.dir}</echo>

    <mkdir dir="${maven.dist.assembly.dir}/bin"/>
    <mkdir dir="${maven.dist.assembly.dir}/lib"/>
    <mkdir dir="${maven.dist.assembly.dir}/custom"/>
  
    <copy todir="${maven.dist.assembly.dir}/bin">
      <fileset dir="src/bin"/>
    </copy>
    
    <chmod file="${maven.dist.assembly.dir}/bin/jelly" perm="ugo+rx" />

    <j:forEach var="dep" items="${pom.dependencies}">
      <j:choose>
        <j:when test="${dep.id == 'forehead'}">
          <copy tofile="${maven.dist.assembly.dir}/lib/forehead.jar" 
              file="${maven.repo.local}/${dep.id}/jars/${dep.jar}"/>
        </j:when>
        <j:otherwise>
          <copy todir="${maven.dist.assembly.dir}/lib" 
              file="${maven.repo.local}/${dep.id}/jars/${dep.jar}"/>
        </j:otherwise>
      </j:choose>
    </j:forEach>
  
    <!-- put a copy of Jelly's jar there too -->               
    <copy todir="${maven.dist.assembly.dir}/lib" 
            file="${maven.build.dir}/${maven.final.name}.jar"/>
  </preGoal>

  <!-- ===================================================================== -->
  <!--                      D I S T : I N S T A L L                          -->
  <!-- ===================================================================== -->
  <!-- This installs Jelly on your system. With an installed Jelly, you'll   -->
  <!-- be able to run Jelly scripts from wherever your are, using :          -->
  <!-- "jelly <script> <outputfile>".                                        -->
  <!-- The installation dir is set in the project.properties file, under the -->
  <!-- name "maven.dist.install.dir", which defaults to "/usr/local/jelly"   -->
  <!-- (yep, that's a Linux path :). Please override it to suit your needs   -->
  <!-- ===================================================================== -->

  <goal name="dist:install"
            description="Installs Jelly on your system."
            prereqs="dist:build">

    <echo>
      +-------------------------------------------------------+
      | I N S T A L L I N G   J E L L Y                       |
      +-------------------------------------------------------+
    </echo>
    <mkdir dir="${maven.dist.install.dir}"/>

    <copy todir="${maven.dist.install.dir}">
      <fileset dir="${maven.dist.assembly.dir}"/>
    </copy>

    <chmod file="${maven.dist.install.dir}/bin/jelly" perm="ugo+rx" />

    <echo>
      * ===================================================== *
      *                    W A R N I N G                      *
      * ===================================================== *
      * Jelly is now almost installed on your system !        *
      * Next, you must set JELLY_HOME to point to             *
      * "maven.dist.install.dir", and add JELLY_HOME/bin      *
      * to your PATH.                                         *
      *                                                       *
      * Then, you will be able to run Jelly scripts using the *
      * command : "jelly script outputfile".                  *
      *                                                       *
      * Enjoy !                                               *
      * ===================================================== *
    </echo>
  </goal>

  <!-- demo programs -->

  	

  <goal name="demo:soap" prereqs="jelly-task" 
	description="Runs the example SOAP demo">
	
	<jelly file="src/test/org/apache/commons/jelly/define/example.jelly"/> 
  </goal>

  <goal name="demo:bean" prereqs="jelly-task" 
	description="Runs the example of binding beans to tags">

<!--	
	<jelly file="src/test/org/apache/commons/jelly/define/beanSample.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/define/beanSample.jelly"/> 
    </java>
  </goal>

  <goal name="demo:jellybean" prereqs="jelly-task" 
	description="Runs the example of binding jelly beans to tags">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/define/jellyBeanSample.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/define/jellyBeanSample.jelly"/> 
    </java>
  </goal>

  <goal name="demo:static" prereqs="jelly-task" 
	description="Outputs some static XML">
	
	<jelly file="src/test/org/apache/commons/jelly/testStatic.jelly"/> 
  </goal>

  <goal name="demo:html" prereqs="jelly-task" 
	description="Runs the example of parsing HTML with jelly">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/html/example.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/html/example.jelly"/> 
    </java>
  </goal>

  <goal name="demo:text" prereqs="jelly-task" 
	description="Runs the example of parsing text with tags via jelly">
	
<!--	
	<jelly file="src/test/org/apache/commons/jelly/html/example2.jelly"/> 
-->	
    <java classname="org.apache.commons.jelly.Jelly" fork="yes">
      <classpath refid="test.classpath"/>
      <arg value="src/test/org/apache/commons/jelly/html/example2.jelly"/> 
    </java>
  </goal>

  <goal name="demo:jeez" prereqs="jelly-task" 
	description="A demo of the jeez taglib">
	
	<jelly file="src/test/org/apache/commons/jelly/jeez/example.jelly"/> 
  </goal>

  <goal name="demo:file" prereqs="jelly-task" 
	description="A demo of the fileScanner tag to walk Ant fileSets">
	
	<jelly file="src/test/org/apache/commons/jelly/ant/filescanner.jelly"/> 
  </goal>




  <goal name="demo:tagdef" prereqs="java:compile"
    description="A demonstration of the use of tagdef inside a Maven build">
    
    <tagdef name="foo">
	  <echo>Called with ${name}. The value of x is ${x} and now will increment</echo>    	
	  <j:set var="x" value="${x + 1}"/>
	</tagdef>
	
	<!-- now lets use the tag -->
	<foo name="a"/>
	<foo name="b"/>			  			  	
  	
  </goal>
  	          
</project>
