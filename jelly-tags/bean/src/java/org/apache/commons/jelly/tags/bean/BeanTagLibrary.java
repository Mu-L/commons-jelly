/*
 * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/jelly-tags/bean/src/java/org/apache/commons/jelly/tags/bean/BeanTagLibrary.java,v 1.4 2003/02/25 22:54:22 jstrachan Exp $
 * $Revision: 1.4 $
 * $Date: 2003/02/25 22:54:22 $
 *
 * ====================================================================
 *
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2002 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution, if
 *    any, must include the following acknowlegement:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowlegement may appear in the software itself,
 *    if and wherever such third-party acknowlegements normally appear.
 *
 * 4. The names "The Jakarta Project", "Commons", and "Apache Software
 *    Foundation" must not be used to endorse or promote products derived
 *    from this software without prior written permission. For written
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * $Id: BeanTagLibrary.java,v 1.4 2003/02/25 22:54:22 jstrachan Exp $
 */
package org.apache.commons.jelly.tags.bean;

import java.lang.reflect.Method;
import java.util.Hashtable;
import java.util.Map;

import org.apache.commons.beanutils.MethodUtils;
import org.apache.commons.jelly.JellyException;
import org.apache.commons.jelly.Tag;
import org.apache.commons.jelly.TagLibrary;
import org.apache.commons.jelly.impl.TagFactory;
import org.apache.commons.jelly.impl.TagScript;

import org.xml.sax.Attributes;

/** Describes the Taglib. This class could be generated by XDoclet
  *
  * @author Theo Niemeijer
  * @version $Revision: 1.4 $
  */
public class BeanTagLibrary extends TagLibrary {

    /** Synchronized map of tag names to bean classes */
    private Map beanTypes = new Hashtable();
    
    /** Synchronized map of tag names to invoke methods */
    private Map invokeMethods = new Hashtable();
    
    public BeanTagLibrary() {
        registerTagFactory(
            "beandef",
            new TagFactory() {
                public Tag createTag(String name, Attributes attributes) throws JellyException {
                    return new BeandefTag(BeanTagLibrary.this);
                }
            }
        );
    }

    /**
     * Allows tags to register new bean types
     */
    public void registerBean(String name, Class type) {
        beanTypes.put(name, type);
    }
    
    /**
     * Allows tags to register new bean types with an associated method
     */
    public void registerBean(String name, Class type, Method method) {
        registerBean(name, type);
        if (method != null) {
            invokeMethods.put(name, method);
        }
        else {
            invokeMethods.remove(name);
        }
    }
    
    /**
     * Allows tags to register new bean types with an associated method
     */
    public void registerBean(String name, Class type, String methodName) {
        Method method = MethodUtils.getAccessibleMethod(
        	type, methodName, BeandefTag.EMPTY_ARGUMENT_TYPES
        );
        registerBean(name, type, method);
    }
    
    // TagLibrary interface
    //-------------------------------------------------------------------------                    
    public TagScript createTagScript(
        final String name, final Attributes attributes
    ) throws JellyException {

        // check for standard tags first                        
        TagScript answer = super.createTagScript(name, attributes);
        if (answer != null) {
            return answer;
        }
        
        // lets try a dynamic tag
        return new TagScript( createTagFactory(name, attributes) );
    }

    // Implementation methods
    //-------------------------------------------------------------------------                    

    /** 
     * Factory method to create a TagFactory for a given tag attribute and attributes
     */
    protected TagFactory createTagFactory(String name, Attributes attributes) throws JellyException {

        return new TagFactory() {
            public Tag createTag(String name, Attributes attributes) throws JellyException {
                return createBeanTag(name, attributes);
            }
        };
    }

    protected Tag createBeanTag(String name, Attributes attributes) throws JellyException {
        // is the name bound to a specific class
        Class beanType = getBeanType(name, attributes);
        if (beanType != null) {
            Method invokeMethod = (Method) invokeMethods.get(name);
            return new BeanTag(beanType, name, invokeMethod);
        }
        
        // its a property tag
        return new BeanPropertyTag(name);
    }
    
    protected Class getBeanType(String name, Attributes attributes) {
        return (Class) beanTypes.get(name);
    }
}
